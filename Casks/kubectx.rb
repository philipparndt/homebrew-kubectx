# This file was generated by GoReleaser. DO NOT EDIT.
cask "kubectx" do
  desc "Command-line tool for managing Kubernetes contexts"
  homepage "https://github.com/philipparndt/kubectx"
  version "0.4.2"

  livecheck do
    skip "Auto-generated on release."
  end

  binary "kubectx"

  on_macos do
    on_intel do
      url "https://github.com/philipparndt/kubectx/releases/download/v0.4.2/kubectx_darwin_x86_64.tar.gz"
      sha256 "ae50cbf6ff9e71d37522d6f29a030a80020d4ba133660b5b459a3ad9767f1976"
    end
    on_arm do
      url "https://github.com/philipparndt/kubectx/releases/download/v0.4.2/kubectx_darwin_arm64.tar.gz"
      sha256 "6595612fd2f871d753f3094321b76a6b23b0ee52a3111947128eb94d2b38cb2e"
    end
  end

  on_linux do
    on_intel do
      url "https://github.com/philipparndt/kubectx/releases/download/v0.4.2/kubectx_linux_x86_64.tar.gz"
      sha256 "9901d5e43243e194d52f94fbd01697afc4d75131a9d2b814446a1e8c7b6c731d"
    end
    on_arm do
      url "https://github.com/philipparndt/kubectx/releases/download/v0.4.2/kubectx_linux_arm64.tar.gz"
      sha256 "06d50deb5d1f720591b3209ff0dd224ebee53ef5c93e65e0741d7b23052db007"
    end
  end

  postflight do
    begin
      bash_output = Utils.safe_popen_read({ "SHELL" => "bash" }, "#{staged_path}/kubectx completion bash")
      (bash_completion/"kubectx").write bash_output
    rescue => e
      opoo "Failed to install bash completion: #{e}"
    end

    begin
      zsh_output = Utils.safe_popen_read({ "SHELL" => "zsh" }, "#{staged_path}/kubectx completion zsh")
      (zsh_completion/"_kubectx").write zsh_output
    rescue => e
      opoo "Failed to install zsh completion: #{e}"
    end

    begin
      fish_output = Utils.safe_popen_read({ "SHELL" => "fish" }, "#{staged_path}/kubectx completion fish")
      (fish_completion/"kubectx.fish").write fish_output
    rescue => e
      opoo "Failed to install fish completion: #{e}"
    end

    if system_command("/usr/bin/xattr", args: ["-h"]).exit_status == 0
      system_command "/usr/bin/xattr", args: ["-dr", "com.apple.quarantine", "#{staged_path}/kubectx"]
    end
  end

  caveats do
    "Run using kubectx."
  end

  # No zap stanza required
end
